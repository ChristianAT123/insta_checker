name: Instagram DMCA Link Checker

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      # Use whichever secret you actually have set. If yours is GOOGLE_CREDENTIALS_JSON,
      # this maps it into both envs the script can read.
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS || secrets.GOOGLE_CREDENTIALS_JSON }}
      GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS || secrets.GOOGLE_CREDENTIALS_JSON }}
      PYTHONWARNINGS: ignore::DeprecationWarning

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-ms-playwright-

      - name: Install Playwright browsers
        uses: microsoft/playwright-github-action@v1
        with:
          with-deps: true

      - name: Prepare Google credentials (raw JSON or base64)
        shell: bash
        run: |
          set -euo pipefail
          # Read secret into a file exactly as-is (no heredocs, no extra whitespace)
          : "${GOOGLE_CREDENTIALS:?GOOGLE_CREDENTIALS secret is empty or not set}"
          tmpfile="$(mktemp)"
          printf '%s' "$GOOGLE_CREDENTIALS" > "$tmpfile"

          # If it starts with '{' treat as raw JSON; otherwise try base64 decode.
          if head -c1 "$tmpfile" | grep -q '{'; then
            cp "$tmpfile" credentials.json
          else
            base64 -d "$tmpfile" > credentials.json || { echo "Secret was not JSON and base64 decode failed."; exit 1; }
          fi

          # Validate JSON strictly; show size and first char for debug.
          echo "credentials.json bytes: $(wc -c < credentials.json)"
          python - <<'PY'
import json, sys
with open("credentials.json","rb") as f:
    b=f.read()
    if not b or b[:1] in (b"\n", b"\r"): 
        print("credentials.json starts with newline or is empty", file=sys.stderr); sys.exit(1)
    try:
        obj=json.loads(b.decode("utf-8"))
    except Exception as e:
        print("Invalid JSON:", e, file=sys.stderr); sys.exit(1)
    required=("type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri")
    missing=[k for k in required if k not in obj]
    if missing:
        print("Missing expected keys:", ", ".join(missing), file=sys.stderr); sys.exit(1)
print("credentials.json looks valid.")
PY
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/credentials.json" >> "$GITHUB_ENV"

      - name: Run script
        run: python check_instagram_links.py
